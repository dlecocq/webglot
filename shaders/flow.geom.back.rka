);
}

void main() {

	float alpha;

	int i;
	
	int count;
	count = 500;
	
	float step;
	float dalpha;
	
	//dalpha = 1.0 / count;
	dalpha = 0.0;
	step = 0.1;
	
	float error;
	float emin;
	float emax;
	
	emin = 0.01;
	emax = 0.1;
	
	alpha = 1.0;
	
	vec2 p0;
	vec2 p1;
	vec2 p2;
	vec2 p3;
	
	vec2 p;
	vec2 pn;

	float t;
	
	p = gl_PositionIn[0].xy;
	t = gl_PositionIn[0].z;
	
	gl_FrontColor = vec4(1.0, 0.0, 0.0, alpha);
	gl_Position = gl_ModelViewProjectionMatrix * vec4(p.x, p.y, 0.0, 1.0);
	EmitVertex();
	
	for (i = 0; i < count; ++i) {
		do {
			p0 = step * function(p.x, p.y);
			p1 = step * function(p0.x / 2.0 + p.x, p0.y / 2.0 + p.y);
			p2 = step * function(p1.x / 2.0 + p.x, p1.y / 2.0 + p.y);
			p3 = step * function(p2.x / 2.0 + p.x, p2.y / 2.0 + p.y);
			pn = p + p0 / 6.0 + p1 / 3.0 + p2 / 3.0 + p3 / 6.0;
			
			p3 = (p3 - pn * step) / 6.0;
			error = sqrt(p3.x * p3.x + p3.y + p3.y);
			
			if (error > emax) {
				step /= 2.0;
			} else if (error < emin) {
				step *= 2.0;
			}
			
		} while (error > emax || error < emin);
		
		p = pn;
		alpha += dalpha;
		gl_FrontColor = vec4(1.0, 0.0, 0.0, alpha);
		gl_Position = gl_ModelViewProjectionMatrix * vec4(p.x, p.y, 0.0, 1.0);
		EmitVertex();
	}
		
	EndPrimitive();
}
